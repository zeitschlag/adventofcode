import unittest
from day_11 import *


class DayElevenTests(unittest.TestCase):
    def test_read_seat_map(self):
        expected = [
            ["L", ".", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", "L", "L", "L", "L", "L", "L", ".", "L", "L"],
            ["L", ".", "L", ".", "L", ".", ".", "L", ".", "."],
            ["L", "L", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", ".", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", ".", "L", "L", "L", "L", "L", ".", "L", "L"],
            [".", ".", "L", ".", "L", ".", ".", ".", ".", "."],
            ["L", "L", "L", "L", "L", "L", "L", "L", "L", "L"],
            ["L", ".", "L", "L", "L", "L", "L", "L", ".", "L"],
            ["L", ".", "L", "L", "L", "L", "L", ".", "L", "L"],
        ]
        seat_map = read_seat_map(filename="sample_input.txt")

        self.assertListEqual(expected, seat_map)

    def test_read_occupied_seat_map(self):
        expected = [
            ["#", ".", "#", "L", ".", "L", "#", ".", "#", "#"],
            ["#", "L", "L", "L", "#", "L", "L", ".", "L", "#"],
            ["L", ".", "#", ".", "L", ".", ".", "#", ".", "."],
            ["#", "L", "#", "#", ".", "#", "#", ".", "L", "#"],
            ["#", ".", "#", "L", ".", "L", "L", ".", "L", "L"],
            ["#", ".", "#", "L", "#", "L", "#", ".", "#", "#"],
            [".", ".", "L", ".", "L", ".", ".", ".", ".", "."],
            ["#", "L", "#", "L", "#", "#", "L", "#", "L", "#"],
            ["#", ".", "L", "L", "L", "L", "L", "L", ".", "L"],
            ["#", ".", "#", "L", "#", "L", "#", ".", "#", "#"],
        ]
        seat_map = read_seat_map(filename="occupied_seats.txt")

        self.assertListEqual(expected, seat_map)

    def test_count_no_occupied_seats(self):
        seat_map = [
            ["L", ".", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", "L", "L", "L", "L", "L", "L", ".", "L", "L"],
            ["L", ".", "L", ".", "L", ".", ".", "L", ".", "."],
            ["L", "L", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", ".", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", ".", "L", "L", "L", "L", "L", ".", "L", "L"],
            [".", ".", "L", ".", "L", ".", ".", ".", ".", "."],
            ["L", "L", "L", "L", "L", "L", "L", "L", "L", "L"],
            ["L", ".", "L", "L", "L", "L", "L", "L", ".", "L"],
            ["L", ".", "L", "L", "L", "L", "L", ".", "L", "L"],
        ]
        expected = 0
        result = count_occupied_seats(seat_map=seat_map)
        self.assertEqual(expected, result)

    def test_count_37_occupied_seats(self):
        seat_map = [
            ["#", ".", "#", "L", ".", "L", "#", ".", "#", "#"],
            ["#", "L", "L", "L", "#", "L", "L", ".", "L", "#"],
            ["L", ".", "#", ".", "L", ".", ".", "#", ".", "."],
            ["#", "L", "#", "#", ".", "#", "#", ".", "L", "#"],
            ["#", ".", "#", "L", ".", "L", "L", ".", "L", "L"],
            ["#", ".", "#", "L", "#", "L", "#", ".", "#", "#"],
            [".", ".", "L", ".", "L", ".", ".", ".", ".", "."],
            ["#", "L", "#", "L", "#", "#", "L", "#", "L", "#"],
            ["#", ".", "L", "L", "L", "L", "L", "L", ".", "L"],
            ["#", ".", "#", "L", "#", "L", "#", ".", "#", "#"],
        ]
        expected = 37
        result = count_occupied_seats(seat_map=seat_map)
        self.assertEqual(expected, result)

    def test_stabilize_seatmap(self):
        seat_map = [
            ["L", ".", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", "L", "L", "L", "L", "L", "L", ".", "L", "L"],
            ["L", ".", "L", ".", "L", ".", ".", "L", ".", "."],
            ["L", "L", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", ".", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", ".", "L", "L", "L", "L", "L", ".", "L", "L"],
            [".", ".", "L", ".", "L", ".", ".", ".", ".", "."],
            ["L", "L", "L", "L", "L", "L", "L", "L", "L", "L"],
            ["L", ".", "L", "L", "L", "L", "L", "L", ".", "L"],
            ["L", ".", "L", "L", "L", "L", "L", ".", "L", "L"],
        ]
        expected_stabilized_seat_map = [
            ["#", ".", "#", "L", ".", "L", "#", ".", "#", "#"],
            ["#", "L", "L", "L", "#", "L", "L", ".", "L", "#"],
            ["L", ".", "#", ".", "L", ".", ".", "#", ".", "."],
            ["#", "L", "#", "#", ".", "#", "#", ".", "L", "#"],
            ["#", ".", "#", "L", ".", "L", "L", ".", "L", "L"],
            ["#", ".", "#", "L", "#", "L", "#", ".", "#", "#"],
            [".", ".", "L", ".", "L", ".", ".", ".", ".", "."],
            ["#", "L", "#", "L", "#", "#", "L", "#", "L", "#"],
            ["#", ".", "L", "L", "L", "L", "L", "L", ".", "L"],
            ["#", ".", "#", "L", "#", "L", "#", ".", "#", "#"],
        ]
        stabilized_seat_map = stabilize_seat_map(seat_map=seat_map)
        self.assertListEqual(stabilized_seat_map, expected_stabilized_seat_map)

    def test_generate_new_seat_map(self):
        old_seat_map = [
            ["L", ".", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", "L", "L", "L", "L", "L", "L", ".", "L", "L"],
            ["L", ".", "L", ".", "L", ".", ".", "L", ".", "."],
            ["L", "L", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", ".", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", ".", "L", "L", "L", "L", "L", ".", "L", "L"],
            [".", ".", "L", ".", "L", ".", ".", ".", ".", "."],
            ["L", "L", "L", "L", "L", "L", "L", "L", "L", "L"],
            ["L", ".", "L", "L", "L", "L", "L", "L", ".", "L"],
            ["L", ".", "L", "L", "L", "L", "L", ".", "L", "L"],
        ]
        expected_new_seat_map = [
            ["#", ".", "#", "#", ".", "#", "#", ".", "#", "#"],
            ["#", "#", "#", "#", "#", "#", "#", ".", "#", "#"],
            ["#", ".", "#", ".", "#", ".", ".", "#", ".", "."],
            ["#", "#", "#", "#", ".", "#", "#", ".", "#", "#"],
            ["#", ".", "#", "#", ".", "#", "#", ".", "#", "#"],
            ["#", ".", "#", "#", "#", "#", "#", ".", "#", "#"],
            [".", ".", "#", ".", "#", ".", ".", ".", ".", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
            ["#", ".", "#", "#", "#", "#", "#", "#", ".", "#"],
            ["#", ".", "#", "#", "#", "#", "#", ".", "#", "#"],
        ]

        new_seat_map = generate_new_seat_map(old_seat_map=old_seat_map)
        self.assertListEqual(new_seat_map, expected_new_seat_map)

    def test_generate_another_new_seat_map(self):
        old_seat_map =  [
            ["#", ".", "#", "#", ".", "#", "#", ".", "#", "#"],
            ["#", "#", "#", "#", "#", "#", "#", ".", "#", "#"],
            ["#", ".", "#", ".", "#", ".", ".", "#", ".", "."],
            ["#", "#", "#", "#", ".", "#", "#", ".", "#", "#"],
            ["#", ".", "#", "#", ".", "#", "#", ".", "#", "#"],
            ["#", ".", "#", "#", "#", "#", "#", ".", "#", "#"],
            [".", ".", "#", ".", "#", ".", ".", ".", ".", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
            ["#", ".", "#", "#", "#", "#", "#", "#", ".", "#"],
            ["#", ".", "#", "#", "#", "#", "#", ".", "#", "#"],
        ]

        expected_new_seat_map = [
            ["#", ".", "L", "L", ".", "L", "#", ".", "#", "#"],
            ["#", "L", "L", "L", "L", "L", "L", ".", "L", "#"],
            ["L", ".", "L", ".", "L", ".", ".", "L", ".", "."],
            ["#", "L", "L", "L", ".", "L", "L", ".", "L", "#"],
            ["#", ".", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["#", ".", "L", "L", "L", "L", "#", ".", "#", "#"],
            [".", ".", "L", ".", "L", ".", ".", ".", ".", "."],
            ["#", "L", "L", "L", "L", "L", "L", "L", "L", "#"],
            ["#", ".", "L", "L", "L", "L", "L", "L", ".", "L"],
            ["#", ".", "#", "L", "L", "L", "L", ".", "#", "#"],
        ]

        new_seat_map = generate_new_seat_map(old_seat_map=old_seat_map)
        self.assertListEqual(new_seat_map, expected_new_seat_map)


if __name__ == '__main__':
    unittest.main()
